/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package no.nav.oppgave.models

import com.fasterxml.jackson.annotation.JsonProperty

/**
 * Liste over oppgaver
 *
 * @param id Syntetisk id
 * @param tildeltEnhetsnr Enheten oppgaven er tildelt
 * @param tema Kategorisering av oppgaven. Hvilket tema/fagområde oppgaven tilhører
 * @param oppgavetype Kategorisering av hva slags oppgavetype det er. Hvilke oppgavetyper som er tillatt for et gitt tema er definert i oppgavekodeverket.
 * @param versjon Brukes for å håndtere optimistisk låsing, hvor to brukere har skrevet på samme oppgave. Hver gang det gjøres til på en oppgave, økes verdien av VERSJON med 1. Når en klient skal lagre til på en oppgave, sendes verdien av VERSJON oppgaven hadde da informasjon om oppgaven som nå er endret ble hentet ut. Dersom verdien av VERSJON er endret, har noen andre lagret oppgaven i mellomtiden, og oppgaven kan ikke lagres. 409 Conflict vil returneres fra tjenesten. Under oppretting av oppgave trenger man ikke å spesifisere noen verdi for dette feltet, oppgaven vil starte på versjon 1
 * @param prioritet Angir hvilken prioritet oppgaven har
 * @param status Hvilken status oppgaven har. Konsumenter bør kun forholde seg til dette ved behov for å skille mellom ferdigstilt og feilregistrert
 * @param aktivDato Angir når det er relevant å ta tak i oppgaven. Settes normalt til samme dato som oppgaven opprettes, men endres fremover i tid dersom oppgaven f.eks settes på vent. I Gosys vil oppgaver på vent som standard skjules, men kan hente frem om ønskelig
 * @param personident ident for person, dvs. fnr, dnr, npid eller aktørid
 * @param endretAvEnhetsnr Enheten som endret oppgaven
 * @param opprettetAvEnhetsnr Hvilken enhet som har opprettet oppgaven
 * @param journalpostId Id for en journalpostreferanse
 * @param behandlesAvApplikasjon Hvilken applikasjon oppgaven skal behandles i
 * @param aktoerId Syntetisk id for en person, kan hentes fra PDL
 * @param orgnr Organisasjonsnummer. Bedriften oppgaven skal løses på vegne av
 * @param tilordnetRessurs NavIdent for ressursen som er tilordnet oppgaven.
 * @param beskrivelse MERK! Vi arbeider med å migrere bort fra ett stort tekstfelt til strukturerte kommentarer + strukturert endringslogg. Bruken av feltet er under utfasing i Gosys. Dersom ditt system benytter dette feltet ber vi dere følge disse retningslinjene  : 1. Beskrivelse som registreres samtidig som oppgaven blir opprettet, skal _ikke_ ha header 2. Når beskrivelsen benyttes til status-oppdateringer, kommentarer etc i etterkant så skal header på følgende format benyttes, og legges til foran den eksisterende beskrivelsen:  --- dd.MM.yyyy <navn på ansatt> (<navident/systemnavn>, <enhet endringen utføres på vegne av>)\\n\\n 3. Ta i bruk kommentar-feltet for å registrere kommentarer fra saksbehandlere og/eller automatiske oppdateringer i tillegg til beskrivelsen, samt gi oss beskjed om at dette er gjort. Kommentaren skal _ikke_ ha headerLegacyfelt som benyttes til mye forskjellig. For å ivareta bakoverkompatibilitet, må konsumenter som ønsker at beskrivelseshistorikken skal være synlig i andre skjermbilder enn så lenge fortsette å benytte dette 
 * @param behandlingstema Kategoriserer oppgaven innenfor angitt tema. Som hovedregel skal det alltid angis enten behandlingstema, behandlingstype eller begge. Tillatte verdier er begrenset per tema, og endringer avklares med fagansvarlig/styringsenhet for området. Se /api/v1/kodeverk/gjelder/{tema}
 * @param behandlingstype Kategoriserer oppgaven innenfor angitt tema. Som hovedregel skal det alltid angis enten behandlingstema, behandlingstype eller begge. Tillatte verdier er begrenset per tema, og endringer avklares med fagansvarlig/styringsenhet for området. Se /api/v1/kodeverk/gjelder/{tema}
 * @param mappeId Hvilken mappe oppgaven er plassert i. Mapper administreres av den enkelte enhet. Mapper tilknyttet enheten hentes via eget endepunkt 
 * @param opprettetAv Hvilken bruker eller system som opprettet oppgaven
 * @param endretAv Hvilken bruker eller system som endret oppgaven sist
 * @param fristFerdigstillelse Oppgavens frist for ferdigstillelse.
 * @param opprettetTidspunkt Opprettet tidspunkt iht. ISO-8601
 * @param ferdigstiltTidspunkt Tidspunktet oppgaven ble ferdigstilt iht. ISO-8601
 * @param endretTidspunkt Tidspunktet oppgaven sist ble endret iht. ISO-8601
 * @param bruker 
 */


data class Oppgave (

    /* Syntetisk id */
    @get:JsonProperty("id")
    val id: kotlin.Long,

    /* Enheten oppgaven er tildelt */
    @get:JsonProperty("tildeltEnhetsnr")
    val tildeltEnhetsnr: kotlin.String,

    /* Kategorisering av oppgaven. Hvilket tema/fagområde oppgaven tilhører */
    @get:JsonProperty("tema")
    val tema: kotlin.String,

    /* Kategorisering av hva slags oppgavetype det er. Hvilke oppgavetyper som er tillatt for et gitt tema er definert i oppgavekodeverket. */
    @get:JsonProperty("oppgavetype")
    val oppgavetype: kotlin.String,

    /* Brukes for å håndtere optimistisk låsing, hvor to brukere har skrevet på samme oppgave. Hver gang det gjøres til på en oppgave, økes verdien av VERSJON med 1. Når en klient skal lagre til på en oppgave, sendes verdien av VERSJON oppgaven hadde da informasjon om oppgaven som nå er endret ble hentet ut. Dersom verdien av VERSJON er endret, har noen andre lagret oppgaven i mellomtiden, og oppgaven kan ikke lagres. 409 Conflict vil returneres fra tjenesten. Under oppretting av oppgave trenger man ikke å spesifisere noen verdi for dette feltet, oppgaven vil starte på versjon 1 */
    @get:JsonProperty("versjon")
    val versjon: kotlin.Int,

    /* Angir hvilken prioritet oppgaven har */
    @get:JsonProperty("prioritet")
    val prioritet: Oppgave.Prioritet,

    /* Hvilken status oppgaven har. Konsumenter bør kun forholde seg til dette ved behov for å skille mellom ferdigstilt og feilregistrert */
    @get:JsonProperty("status")
    val status: Oppgave.Status,

    /* Angir når det er relevant å ta tak i oppgaven. Settes normalt til samme dato som oppgaven opprettes, men endres fremover i tid dersom oppgaven f.eks settes på vent. I Gosys vil oppgaver på vent som standard skjules, men kan hente frem om ønskelig */
    @get:JsonProperty("aktivDato")
    val aktivDato: java.time.LocalDate,

    /* ident for person, dvs. fnr, dnr, npid eller aktørid */
    @get:JsonProperty("personident")
    val personident: kotlin.String? = null,

    /* Enheten som endret oppgaven */
    @get:JsonProperty("endretAvEnhetsnr")
    val endretAvEnhetsnr: kotlin.String? = null,

    /* Hvilken enhet som har opprettet oppgaven */
    @get:JsonProperty("opprettetAvEnhetsnr")
    val opprettetAvEnhetsnr: kotlin.String? = null,

    /* Id for en journalpostreferanse */
    @get:JsonProperty("journalpostId")
    val journalpostId: kotlin.String? = null,

    /* Hvilken applikasjon oppgaven skal behandles i */
    @get:JsonProperty("behandlesAvApplikasjon")
    val behandlesAvApplikasjon: kotlin.String? = null,

    /* Syntetisk id for en person, kan hentes fra PDL */
    @get:JsonProperty("aktoerId")
    val aktoerId: kotlin.String? = null,

    /* Organisasjonsnummer. Bedriften oppgaven skal løses på vegne av */
    @get:JsonProperty("orgnr")
    val orgnr: kotlin.String? = null,

    /* NavIdent for ressursen som er tilordnet oppgaven. */
    @get:JsonProperty("tilordnetRessurs")
    val tilordnetRessurs: kotlin.String? = null,

    /* MERK! Vi arbeider med å migrere bort fra ett stort tekstfelt til strukturerte kommentarer + strukturert endringslogg. Bruken av feltet er under utfasing i Gosys. Dersom ditt system benytter dette feltet ber vi dere følge disse retningslinjene  : 1. Beskrivelse som registreres samtidig som oppgaven blir opprettet, skal _ikke_ ha header 2. Når beskrivelsen benyttes til status-oppdateringer, kommentarer etc i etterkant så skal header på følgende format benyttes, og legges til foran den eksisterende beskrivelsen:  --- dd.MM.yyyy <navn på ansatt> (<navident/systemnavn>, <enhet endringen utføres på vegne av>)\\n\\n 3. Ta i bruk kommentar-feltet for å registrere kommentarer fra saksbehandlere og/eller automatiske oppdateringer i tillegg til beskrivelsen, samt gi oss beskjed om at dette er gjort. Kommentaren skal _ikke_ ha headerLegacyfelt som benyttes til mye forskjellig. For å ivareta bakoverkompatibilitet, må konsumenter som ønsker at beskrivelseshistorikken skal være synlig i andre skjermbilder enn så lenge fortsette å benytte dette  */
    @get:JsonProperty("beskrivelse")
    val beskrivelse: kotlin.String? = null,

    /* Kategoriserer oppgaven innenfor angitt tema. Som hovedregel skal det alltid angis enten behandlingstema, behandlingstype eller begge. Tillatte verdier er begrenset per tema, og endringer avklares med fagansvarlig/styringsenhet for området. Se /api/v1/kodeverk/gjelder/{tema} */
    @get:JsonProperty("behandlingstema")
    val behandlingstema: kotlin.String? = null,

    /* Kategoriserer oppgaven innenfor angitt tema. Som hovedregel skal det alltid angis enten behandlingstema, behandlingstype eller begge. Tillatte verdier er begrenset per tema, og endringer avklares med fagansvarlig/styringsenhet for området. Se /api/v1/kodeverk/gjelder/{tema} */
    @get:JsonProperty("behandlingstype")
    val behandlingstype: kotlin.String? = null,

    /* Hvilken mappe oppgaven er plassert i. Mapper administreres av den enkelte enhet. Mapper tilknyttet enheten hentes via eget endepunkt  */
    @get:JsonProperty("mappeId")
    val mappeId: kotlin.Long? = null,

    /* Hvilken bruker eller system som opprettet oppgaven */
    @get:JsonProperty("opprettetAv")
    val opprettetAv: kotlin.String? = null,

    /* Hvilken bruker eller system som endret oppgaven sist */
    @get:JsonProperty("endretAv")
    val endretAv: kotlin.String? = null,

    /* Oppgavens frist for ferdigstillelse. */
    @get:JsonProperty("fristFerdigstillelse")
    val fristFerdigstillelse: java.time.LocalDate? = null,

    /* Opprettet tidspunkt iht. ISO-8601 */
    @get:JsonProperty("opprettetTidspunkt")
    val opprettetTidspunkt: java.time.OffsetDateTime? = null,

    /* Tidspunktet oppgaven ble ferdigstilt iht. ISO-8601 */
    @get:JsonProperty("ferdigstiltTidspunkt")
    val ferdigstiltTidspunkt: java.time.OffsetDateTime? = null,

    /* Tidspunktet oppgaven sist ble endret iht. ISO-8601 */
    @get:JsonProperty("endretTidspunkt")
    val endretTidspunkt: java.time.OffsetDateTime? = null,

    @get:JsonProperty("bruker")
    val bruker: BrukerDto? = null

) {

    /**
     * Angir hvilken prioritet oppgaven har
     *
     * Values: HOY,NORM,LAV
     */
    enum class Prioritet(val value: kotlin.String) {
        @JsonProperty(value = "HOY") HOY("HOY"),
        @JsonProperty(value = "NORM") NORM("NORM"),
        @JsonProperty(value = "LAV") LAV("LAV");
    }
    /**
     * Hvilken status oppgaven har. Konsumenter bør kun forholde seg til dette ved behov for å skille mellom ferdigstilt og feilregistrert
     *
     * Values: OPPRETTET,AAPNET,UNDER_BEHANDLING,FERDIGSTILT,FEILREGISTRERT
     */
    enum class Status(val value: kotlin.String) {
        @JsonProperty(value = "OPPRETTET") OPPRETTET("OPPRETTET"),
        @JsonProperty(value = "AAPNET") AAPNET("AAPNET"),
        @JsonProperty(value = "UNDER_BEHANDLING") UNDER_BEHANDLING("UNDER_BEHANDLING"),
        @JsonProperty(value = "FERDIGSTILT") FERDIGSTILT("FERDIGSTILT"),
        @JsonProperty(value = "FEILREGISTRERT") FEILREGISTRERT("FEILREGISTRERT");
    }

}

